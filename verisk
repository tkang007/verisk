#!/usr/bin/env python
import argparse

import verisk

parser = argparse.ArgumentParser(description="Generate IDs for a system that are as unique as a verisk (they're just persistent UUIDs). Run with no arguments, simply prints the system's verisk ID.",
                                 epilog="The verisk ID should be generated for the system when this package is installed. You can use this tool to generate an ID if for some reason one doesn't exist.")
parser.add_argument('-f', '--file', action='store', dest='sn_file', default=verisk.VERISK_FILE,
                    help="Use specified file to store id (default: %s)" % verisk.VERISK_FILE)
parser.add_argument('-m', '--make-verisk', action='store_true', dest='make_verisk',
                    help="Make a verisk ID if one doesn't exist. If one already does, this does nothing, so it's always safe to use.")
parser.add_argument('--force-new-key', action='store_true', dest='force_new',
                    help="Force generation of new ID. WARNING: Deletes existing ID.")
args = parser.parse_args()

VERISK_FILE = args.sn_file

try:
    if args.force_new:
        print("WARNING! Forcing me to create new verisk ID. Old verisk ID was '%s'" % verisk.verisk(VERISK_FILE))
        verisk._write_new_id(VERISK_FILE)
    if args.make_verisk:
            verisk.make_verisk(VERISK_FILE)

    id_ = verisk.verisk(VERISK_FILE)
    if id_ is None:
        print("Couldn't find a verisk ID in '%s'. Try running with the -m option to make one." % VERISK_FILE)
        exit(2)
    else:
        print(id_)
        exit(0)

except IOError as e:
    if e.errno == 13: # permission denied
        print("Permission denied when accessing '%s'. If you're making the verisk for the first time for the system, try running this as root." % VERISK_FILE)
        exit(1)
    else:
        raise e
